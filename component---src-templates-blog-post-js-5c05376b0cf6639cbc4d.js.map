{"version":3,"sources":["webpack:///./src/templates/blog-post.js"],"names":["ScrolledHeading","styled","div","render","ScrolledTitle","ScrolledHomeLink","Link","BlogPostTemplate","data","location","pageContext","markdownRemark","excerpt","frontmatter","date","description","tags","title","html","siteTitle","site","siteMetadata","previous","next","useState","scrolledHeader","setScrolledHeader","isTIL","includes","useEffect","scrollEvent","window","addEventListener","scrollY","removeEventListener","to","style","scale","display","marginBottom","rhythm","marginTop","dangerouslySetInnerHTML","__html","flexWrap","justifyContent","listStyle","padding","fields","slug","rel","pageQuery"],"mappings":"2QASMA,EAAkBC,IAAOC,IAAV,iFAAGD,CAAH,uIAGR,qBAAGE,OAAsB,OAAS,UAIlC,qBAAGA,OAAsB,EAAI,KAMpCC,EAAgBH,IAAOC,IAAV,+EAAGD,CAAH,yDAKbI,EAAmBJ,YAAOK,QAAV,kFAAGL,CAAH,8CAoHPM,UA/GU,SAAC,GAInB,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,SACAC,EACI,EADJA,YACI,EAUAF,EAAKG,eARPC,EAFE,EAEFA,QAFE,IAGFC,YACEC,EAJA,EAIAA,KACAC,EALA,EAKAA,YACAC,EANA,EAMAA,KACAC,EAPA,EAOAA,MAEFC,EATE,EASFA,KAEIC,EAAYX,EAAKY,KAAKC,aAAaJ,MACjCK,EAAmBZ,EAAnBY,SAAUC,EAASb,EAATa,KAZd,EAawCC,oBAAS,GAA9CC,EAbH,KAamBC,EAbnB,KAcEC,EAAQX,EAAKY,SAAS,OAc5B,OAZAC,qBAAU,WACR,IAAMC,EAAcC,OAAOC,iBAAiB,UAAU,WAChDD,OAAOE,QAAU,IACnBP,GAAkB,GAElBA,GAAkB,MAItB,OAAO,kBAAMK,OAAOG,oBAAoB,SAAUJ,MACjD,IAGD,kBAAC,IAAD,CAAQrB,SAAUA,EAAUQ,MAAOE,GACjC,kBAAC,IAAD,CACEF,MAAOA,EACPF,YAAaA,GAAeH,IAG9B,kBAAC,IAAD,KAAcK,GAEd,kBAACjB,EAAD,CAAiBG,OAAQsB,GACvB,kBAACpB,EAAD,CAAkB8B,GAAG,KAArB,KAIA,kBAAC/B,EAAD,KAAgBa,IAGlB,uBACEmB,MAAK,iBACAC,aAAM,IADN,CAEHC,QAAS,QACTC,aAAcC,YAAO,GACrBC,UAAWD,aAAQ,MAGpB1B,GAGFa,GACC,oCACE,2BACE,0MAOF,8BAIJ,yBAAKe,wBAAyB,CAAEC,OAAQzB,KAExC,wBACEkB,MAAO,CACLG,aAAcC,YAAO,MAIzB,wBACEJ,MAAO,CACLE,QAAQ,OACRM,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGzB,GACC,kBAAC,OAAD,CAAMa,GAAIb,EAAS0B,OAAOC,KAAMC,IAAI,QAApC,KACK5B,EAAST,YAAYI,QAK9B,4BACGM,GACC,kBAAC,OAAD,CAAMY,GAAIZ,EAAKyB,OAAOC,KAAMC,IAAI,QAC7B3B,EAAKV,YAAYI,MADpB,UAYL,IAAMkC,EAAS","file":"component---src-templates-blog-post-js-5c05376b0cf6639cbc4d.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Link, graphql } from 'gatsby'\nimport styled from 'styled-components'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { PageHeading } from '../components/styled-components'\nimport { rhythm, scale } from '../utils/typography'\n\nconst ScrolledHeading = styled.div`\n  background: white;\n  box-shadow: 1px 1px 3px black;\n  display: ${({ render }) => render ? 'flex' : 'none'};\n  left: 0;\n  padding: 16px;\n  position: fixed;\n  opacity: ${({ render }) => render ? 1 : 0};\n  right: 0;\n  top: 0;\n  z-index: 1;\n`\n\nconst ScrolledTitle = styled.div`\n  font-family: 'Roboto Slab',sans-serif;\n  font-size: 1em;\n`;\n\nconst ScrolledHomeLink = styled(Link)`\n  background-image: none;\n  margin-right: 16px;\n`;\n\nconst BlogPostTemplate = ({\n  data,\n  location,\n  pageContext,\n}) => {\n  const {\n    excerpt,\n    frontmatter: {\n      date,\n      description,\n      tags,\n      title,\n    },\n    html,\n  } = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const { previous, next } = pageContext\n  const [scrolledHeader, setScrolledHeader] = useState(false)\n  const isTIL = tags.includes('TIL')\n\n  useEffect(() => {\n    const scrollEvent = window.addEventListener('scroll', () => {\n      if (window.scrollY > 150) {\n        setScrolledHeader(true)\n      } else {\n        setScrolledHeader(false)\n      }\n    })\n\n    return () => window.removeEventListener('scroll', scrollEvent)\n  }, [])\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={title}\n        description={description || excerpt}\n      />\n\n      <PageHeading>{title}</PageHeading>\n\n      <ScrolledHeading render={scrolledHeader}>\n        <ScrolledHomeLink to=\"/\">\n          ←\n        </ScrolledHomeLink>\n\n        <ScrolledTitle>{title}</ScrolledTitle>\n      </ScrolledHeading>\n\n      <p\n        style={{\n          ...scale(-1 / 5),\n          display: 'block',\n          marginBottom: rhythm(1),\n          marginTop: rhythm(-1),\n        }}\n      >\n        {date}\n      </p>\n\n      {isTIL && (\n        <>\n          <p>\n            <i>\n              I set aside 30 minutes at the end of each work day to reflect on\n              something that I learned or found interesting during the day.\n              I am making an attempt to write these down.\n            </i>\n          </p>\n\n          <hr />\n        </>\n      )}\n\n      <div dangerouslySetInnerHTML={{ __html: html }} />\n\n      <hr\n        style={{\n          marginBottom: rhythm(1),\n        }}\n      />\n\n      <ul\n        style={{\n          display: `flex`,\n          flexWrap: `wrap`,\n          justifyContent: `space-between`,\n          listStyle: `none`,\n          padding: 0,\n        }}\n      >\n        <li>\n          {previous && (\n            <Link to={previous.fields.slug} rel=\"prev\">\n              ← {previous.frontmatter.title}\n            </Link>\n          )}\n        </li>\n\n        <li>\n          {next && (\n            <Link to={next.fields.slug} rel=\"next\">\n              {next.frontmatter.title} →\n            </Link>\n          )}\n        </li>\n      </ul>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        tags\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`\n"],"sourceRoot":""}