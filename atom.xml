<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[]]></title>
  <link href="http://cheshireoctopus.github.io/atom.xml" rel="self"/>
  <link href="http://cheshireoctopus.github.io/"/>
  <updated>2014-01-23T19:27:31-05:00</updated>
  <id>http://cheshireoctopus.github.io/</id>
  <author>
    <name><![CDATA[Chandler Moisen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MailChimp + Gibbon + Rails: Basic Mailing List Setup]]></title>
    <link href="http://cheshireoctopus.github.io/blog/2014/01/23/mailchimp-plus-gibbon-plus-rails-create-a-basic-sign-up-form/"/>
    <updated>2014-01-23T15:57:00-05:00</updated>
    <id>http://cheshireoctopus.github.io/blog/2014/01/23/mailchimp-plus-gibbon-plus-rails-create-a-basic-sign-up-form</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://cheshireoctopus.github.io/images/mailchimp/logo.png" title="MailChimp Logo" alt="MailChimp Logo"></p>

<p>You&rsquo;ve made it to the big time when you want to start a mailing list. There are many ESP&rsquo;s (email service providers) out there, each with respective strengths and weaknesses. I&rsquo;d recommend checking into <a href="http://mailchimp.com">MailChimp</a> as they provide an &ldquo;entrepreneur&rsquo;s plan&rdquo; that allows you to send 12,000 emails a month to 2,000 subscribers &ndash; <strong>for free, for life</strong>. And because I have no experience with any other ESP&hellip;</p>

<p>This tutorial will cover MailChimp&rsquo;s integration with Rails using the <a href="https://github.com/amro/gibbon">Gibbon</a> gem. We will be building a simple Rails application that will display a form to collects users&#8217; email addresses and add them to a MailChimp email list.</p>

<!-- more -->


<p>It is assumed that you possess a basic/intermediate understanding of Ruby (v. 1.9.3) and Rails (v. 4.0.2).</p>

<p><strong>Note</strong>: this tutorial covers MailChimp&rsquo;s V2 of their API.</p>

<h2>Part One: MailChimp</h2>

<p>Before we jump into Rails, we need to do three things: 1) obtain our API key, 2) make an email list with MailChimp; 3) obtain that list&rsquo;s ID.</p>

<p>1) Once logged into your MailChimp account, look to the left, select your name, and then &ldquo;Account Settings&rdquo; in the popup menu. Next, click the &ldquo;Extras&rdquo; dropdown and select &ldquo;API Keys&rdquo;. Voilla, you have your API key.</p>

<p>2) To generate an email list, select &ldquo;Lists&rdquo; from the menu on the left. In the top-right corner, click &ldquo;Create List&rdquo; to begin the process. Hint: it&rsquo;s relatively straight forward.</p>

<p>3) To get the ID of the list you just created, select &ldquo;List&rdquo; from the menu on the left. This displays a list of lists&hellip;Click on the name of your new list, then the &ldquo;Settings&rdquo; dropdown, and select &ldquo;List name &amp; defaults&rdquo;. Now you have your list ID. Super.</p>

<h2>Part Two: Rails</h2>

<p>The Rails integration involves five steps: 1) adding the Gibbon gem to your gemfile; 2) creating an intializer file; 3) generating a controller and 4) a view; and 5) configuring your routes.</p>

<p>1) Add the Gibbon gem to your gemfile and run <code>bundle</code> in your terminal. <a href="https://github.com/amro/gibbon">Gibbon is an API wrapper for MailChimp&rsquo;s Primary and Export APIs</a>, or, in other words, <a href="http://apidocs.mailchimp.com/">a chunk of code you can drop into your project and work with quickly</a>. There are quite a few MailChimp API Wrappers spanning a variety of languages. Rails has <a href="http://apidocs.mailchimp.com/api/downloads/#ruby-rails">three wrappers</a> specifc to the V2 API.</p>

<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;gibbon&#39;</span><span class="p">,</span> <span class="ss">git</span><span class="p">:</span> <span class="s1">&#39;git://github.co/amro/gibbon.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take note: <a href="http://lizhubertz.com/post/60499344852/using-the-mailchimp-api-and-gibbon-gem-with-ruby-on">other</a> <a href="http://mrgeorgegray.com/workflow/getting-a-grip-on-gibbon/">tutorials</a> reported issues running the correct version of the gem. If you encounter a similar problem, try adding <strong>git: &lsquo;git://github.co/amro/gibbon.git&rsquo;</strong> to your gemfile so it points to the gem&rsquo;s repository.</p>

<p>2) Create a new initializer file, <strong>&lsquo;gibbon.rb&rsquo;</strong>, in <strong>&lsquo;config/initializers&rsquo;</strong> to declare your MailChimp API key and two other variables. Setting <strong>throws_exception</strong> to <strong>false</strong> will give you a pretty hash in the event of an error.</p>

<figure class='code'><figcaption><span>config/initializers/gibbon.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="ss">Gibbon</span><span class="p">:</span><span class="ss">:API</span><span class="o">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="s2">&quot;YOUR-API-KEY&quot;</span>
</span><span class='line'>  <span class="ss">Gibbon</span><span class="p">:</span><span class="ss">:API</span><span class="o">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class='line'>  <span class="ss">Gibbon</span><span class="p">:</span><span class="ss">:API</span><span class="o">.</span><span class="n">throws_exceptions</span> <span class="o">=</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>3) Generate a controller <strong>&lsquo;emailapi&rsquo;</strong> to handle MailChimp&rsquo;s API calls and create a method <strong>&lsquo;subscribe&rsquo;</strong> that will be responsible for taking users&#8217; email input and pushing it to your mailing list.</p>

<figure class='code'><figcaption><span>app/controllers/emailapi_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">subscribe</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@list_id</span> <span class="o">=</span> <span class="s2">&quot;YOUR-LIST-ID&quot;</span>
</span><span class='line'>    <span class="n">gb</span> <span class="o">=</span> <span class="ss">Gibbon</span><span class="p">:</span><span class="ss">:API</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">gb</span><span class="o">.</span><span class="n">lists</span><span class="o">.</span><span class="n">subscribe</span><span class="p">({</span>
</span><span class='line'>      <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@list_id</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:email</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">][</span><span class="ss">:address</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The variables <code>@list_id</code> and <code>gb</code> are respectively defined as the ID of the list you created (from Part One, remember?) and an instance of the API wrapper. The latter is pulling from the <strong>&lsquo;app/config/initializers/gibbon.rb&rsquo;</strong>.</p>

<p>Next, we make an API call &ndash; <code>.lists.subscribe()</code> &ndash; on the instance itself. This call takes a hash as an argument, and in this hash, we pass two parameters: <code>:id</code>, associated with the ID of your list, and <code>:email</code>, associated with the user&rsquo;s email (this will become clearer after we construct the view).</p>

<p>4) Having completed the controller, let&rsquo;s make the corresponding view. Create a file <strong>&lsquo;index.html.erb&rsquo;</strong> in <strong>&lsquo;/app/views/emailapi&rsquo;</strong>.</p>

<figure class='code'><figcaption><span>app/views/emailapi/index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;h1&gt;Get My Awesome News Letter&lt;/h1&gt;</span>
</span><span class='line'><span class="x">&lt;p&gt;Give me your email and keep up to date on my cat&#39;s thoughts.&lt;/p&gt;</span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_tag</span><span class="p">(</span><span class="s1">&#39;/emailapi/subscribe&#39;</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="s2">&quot;post&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;subscribe&quot;</span><span class="p">,</span> <span class="ss">remote</span><span class="p">:</span> <span class="s2">&quot;true&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">   </span><span class="cp">&lt;%=</span> <span class="n">email_field</span><span class="p">(</span><span class="ss">:email</span><span class="p">,</span> <span class="ss">:address</span><span class="p">,</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;email&quot;</span><span class="p">,</span> <span class="ss">placeholder</span><span class="p">:</span> <span class="s2">&quot;email address&quot;</span><span class="p">})</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">   </span><span class="cp">&lt;%=</span> <span class="n">submit_tag</span><span class="p">(</span><span class="s2">&quot;Sign me up!&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Beneath the <code>&lt;h1&gt;</code> and <code>&lt;p&gt;</code> html elements, use a Rails helper <code>form_tag</code> to create the sign up form. Pass in four paramaters: 1) the action the form is going to take, or where the form will be submitted; 2) the HTML method defining how the action will occur, in this case <code>post</code>; 3) the form&rsquo;s ID; 4) set <code>remote</code> to <code>true</code>, allowing unobtrusive JS drivers to modify the the form&rsquo;s behavior.</p>

<p>Lastly the, <code>submit_tag</code> method creates our <code>&lt;input&gt;</code> tags. Our form is rendered in HTML as seen below:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Get My Awesome News Letter<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Give me your email and keep up to date on my cat&#39;s thoughts.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">accept-charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">action=</span><span class="s">&quot;/emailapi/subscribe&quot;</span> <span class="na">data-remote=</span><span class="s">&quot;true&quot;</span> <span class="na">id=</span><span class="s">&quot;subscribe&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;&lt;div</span> <span class="na">style=</span><span class="s">&quot;margin:0;padding:0;display:inline&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;utf8&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;&amp;#x2713;&quot;</span> <span class="nt">/&gt;&lt;/div&gt;</span>   <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;email&quot;</span> <span class="na">name=</span><span class="s">&quot;email[address]&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;email address&quot;</span> <span class="na">type=</span><span class="s">&quot;email&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Sign me up!&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To learn more about forms, check out the <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html">documentation</a>.</p>

<p>For more information on the subscribe API call, check out the <a href="http://apidocs.mailchimp.com/api/2.0/lists/subscribe.php">official documentation</a>.</p>

<p>5) Last, set your routes in <strong>&lsquo;config/routes.rb&rsquo;</strong>.</p>

<figure class='code'><figcaption><span>config/routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span> <span class="s1">&#39;emailapi#index&#39;</span>
</span><span class='line'><span class="n">post</span> <span class="s1">&#39;emailapi/subscribe&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;emailapi#subscribe&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Alright, you should be good to go. Keep in mind, this tutorial barely scratches the surface of MailChimp + Rails + Gibbon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twilio on Rails: SMS Basics]]></title>
    <link href="http://cheshireoctopus.github.io/blog/2013/10/22/twilio-on-rails-sms-basics/"/>
    <updated>2013-10-22T19:37:00-04:00</updated>
    <id>http://cheshireoctopus.github.io/blog/2013/10/22/twilio-on-rails-sms-basics</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://cheshireoctopus.github.io/images/Twilio/Logo.png" title="Twilio Logo" alt="Twilio Logo"></p>

<p><a href="www.twilio.com">Twilio</a> is an awesome platform that makes it super easy to add SMS, voice, and VOIP functionality to your web applications.</p>

<p>This tutorial will show you how to set up an extremely simple Ruby on Rails application that uses Twilio to send SMS messages from your
browser. It&rsquo;s probably best that you have a basic understanding of RoR.</p>

<!-- more -->


<h2>Quick Start</h2>

<h4>Twilio Setup</h4>

<p><strong>1:</strong> <a href="https://www.twilio.com/try-twilio">Sign up</a> for free using a telephone number that you have access to &ndash; preferably your cell &ndash; as you will
have to verify your account via SMS.</p>

<p><strong>2:</strong> Twilio will automatically generate a telephone number for you. In my experience, these generated numbers are issued with
the same area code as the original number you signed up with. <strong>Note:</strong> you can customize your number if you so wish.</p>

<p>After you&rsquo;ve made it through the login, you should be welcomed with this screen:</p>

<p><img class="center" src="http://cheshireoctopus.github.io/images/Twilio/Twilio1.png" title="Twilio Home" alt="Twilio Home"></p>

<p>Make a note of both the <strong>ACCOUNT SID</strong> and the <strong>AUTH TOKEN</strong> &ndash; you will need both of these later. To see the latter, click on the lock to view it.</p>

<p><strong>3:</strong> I like to save my Twilio numbers in my cell because I have a terrible memory. As you can guess, I often forget to do even that. Visiting the &lsquo;Numbers&rsquo;
pane on the Twilio dashboard &ndash; pictured below &ndash; provide them for you.</p>

<p><img class="center" src="http://cheshireoctopus.github.io/images/Twilio/Number.png" title="Twilio Number" alt="Twilio Number"></p>

<h4>Rails Setup</h4>

<p><strong>1:</strong> First, create the Rails application, in this case thought-provokingly named &lsquo;twilio_app&rsquo;. We don&rsquo;t need the index.html that Rails so graciously provides &ndash;
 toss it, you don&rsquo;t need that noise.</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new twilio_app
</span><span class='line'>rm public/index.html</span></code></pre></td></tr></table></div></figure>


<p><strong>2:</strong> Twilio compiled a gem which makes Rails integration realtively painless. Check out the <a href="http://twilio-ruby.readthedocs.org/en/latest/">documentation</a>
and add it in the Gemfile. Make sure to bundle!</p>

<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;twilio-ruby&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3:</strong> Next, we will generate a controller which will be responsbile for making sense of our app&rsquo;s requests and producing the appropriate output. <strong>Note:</strong> this
method of controller generation creates a bunch of extra files you do not need for this application, but it&rsquo;s easy.</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g controller twilio</span></code></pre></td></tr></table></div></figure>


<p><strong>4</strong>: In the controller you just created, add a method &lsquo;send_sms&rsquo; which will send the SMS&rsquo;s. We will come back to this in a moment.</p>

<figure class='code'><figcaption><span>twilio_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TwilioController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">send_sms</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>5:</strong> We&rsquo;re making headway on the back-end, but we need do some barebones front-end functionality. Create a file <strong>&lsquo;index.html.erb&rsquo;</strong> that your Twilio
controller has access to. Make sure this file is located in the following directory: <strong>twilio_app/app/views/layouts</strong>. In this file we are going to create a simple form which will allow the user to input a phone number and a message. Make sure the form&rsquo;s action directs to <strong>&lsquo;/send_sms&rsquo;</strong> and the method is
 <strong>&lsquo;POST&rsquo;</strong>.</p>

<figure class='code'><figcaption><span>index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">    &lt;h1&gt;TWILIO!!!&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">form_tag</span><span class="p">(</span><span class="s1">&#39;/send_sms&#39;</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;input type=&quot;text&quot; placeholder=&quot;enter number&quot; name=&quot;number&quot;&gt;</span>
</span><span class='line'><span class="x">    &lt;input type=&quot;text&quot; placeholder=&quot;enter message here&quot; name=&quot;message&quot;&gt;</span>
</span><span class='line'><span class="x">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Your <strong>index.html.erb</strong> should look like this:</p>

<p><img class="center" src="http://cheshireoctopus.github.io/images/Twilio/Index.png" title="Index.html page" alt="Index.html page"></p>

<p><strong>6:</strong> Now that we&rsquo;ve made our view and controller, let&rsquo;s connect them via <strong>routes.rb</strong>. Clear out the comments in the <strong>routes.rb</strong> file, build a root path that directs to <strong>index.html.erb</strong>, and then another path that will post the information from the form we just built to the <strong>send_sms</strong> method in the Twilio controller.</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">TwilioApp</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">root</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;twilio#index&#39;</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/send_sms&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;twilio#send_sms&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>7:</strong> Alright, last step. Do you still remember your <strong>ACCOUNT SID</strong>, <strong>AUTH TOKEN</strong>, and <strong>Twilio phone number</strong>? We&rsquo;re going to add these to our Twilio controller&rsquo;s <strong>send_sms</strong> method to enable our application to send texts.</p>

<p>I&rsquo;ll show you my code, then walk you through it line by line.</p>

<figure class='code'><figcaption><span>twilio_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="mi">1</span> <span class="k">class</span> <span class="nc">TwilioController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>    <span class="mi">2</span>
</span><span class='line'>    <span class="mi">3</span>  <span class="k">def</span> <span class="nf">send_sms</span>
</span><span class='line'>    <span class="mi">4</span>   <span class="n">message</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span>
</span><span class='line'>    <span class="mi">5</span>   <span class="n">number</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:number</span><span class="o">]</span>
</span><span class='line'>    <span class="mi">6</span>   <span class="n">account_sid</span> <span class="o">=</span> <span class="s1">&#39;XXXyour account sid should be hereXXX&#39;</span>
</span><span class='line'>    <span class="mi">7</span>   <span class="n">auth_token</span> <span class="o">=</span> <span class="s1">&#39;XXXyour auth token should be hereXXX&#39;</span>
</span><span class='line'>    <span class="mi">8</span>
</span><span class='line'>    <span class="mi">9</span>   <span class="vi">@client</span> <span class="o">=</span> <span class="ss">Twilio</span><span class="p">:</span><span class="ss">:REST</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="n">account_sid</span><span class="p">,</span> <span class="n">auth_token</span>
</span><span class='line'>    <span class="mi">10</span>
</span><span class='line'>    <span class="mi">11</span>  <span class="vi">@message</span> <span class="o">=</span> <span class="vi">@client</span><span class="o">.</span><span class="n">account</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">({</span><span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;+1&quot;</span><span class="o">+</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">12</span>                                  <span class="ss">:from</span> <span class="o">=&gt;</span> <span class="s2">&quot;+12813308004&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">13</span>                                   <span class="ss">:body</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">})</span>
</span><span class='line'>    <span class="mi">14</span>   <span class="n">redirect_to</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>    <span class="mi">15</span>  <span class="k">end</span>
</span><span class='line'>    <span class="mi">16</span>
</span><span class='line'>    <span class="mi">17</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>1:</strong> Opens the TwilioController</li>
<li><strong>3:</strong> Defines the <strong>&lsquo;send_sms&rsquo;</strong> method</li>
<li><strong>4:</strong> Takes the <strong>message</strong> input from the form in <strong>index.html.erb</strong> as a paramater and assigns it to the variable &lsquo;message&rsquo;</li>
<li><strong>5:</strong> Takes the <strong>number</strong> input from the form in <strong>index.html.erb</strong> as a paramater and assigns it to the variable &lsquo;number&rsquo;</li>
<li><strong>6:</strong> Stores your <strong>ACCOUNT SID</strong> as a variable</li>
<li><strong>7:</strong> Stores your <strong>AUTH TOKEN</strong> as a variable</li>
<li><strong>9:</strong> Instatiates a Twilio Rest Client as <strong>@client</strong>, which stores the authentication parameters on lines 6 and 7 (account_sid and auth_token, respectively), and enables the <strong>send_sms</strong> method to make HTTP request to Twilio. <a href="http://rubydoc.info/github/twilio/twilio-ruby/Twilio/REST/Client">More info&hellip;</a></li>
<li><strong>11-13:</strong> Creates a message, stored as the variable <strong>@message</strong>, which takes a hash as an argument. The hash should include: <strong>:to</strong>, <strong>:from</strong>, and <strong>:body</strong>. <strong>:to</strong> interpolates the variable <strong>number</strong>, and represents the recipeint of the SMS. <strong>:from</strong> should be your Twilio number stored in the following format: +12813308004. <strong>:body</strong> interpolates the <strong>message</strong> variable which contains the message entered on <strong>index.html.erb</strong>.</li>
<li><strong>14</strong> After the SMS is processed and sent, this redirects the user back to the root directory, or, in our case, <strong>index.html.erb</strong>.</li>
</ul>


<h2>Outcome</h2>

<p>Assuming the code is correct, run the application locally and send yourself a message.</p>

<p>If everything works out, you should be able to send SMS messages from your browser!</p>

<p><img class="center" src="http://cheshireoctopus.github.io/images/Twilio/Example.png" title="Twilio Cat" alt="Twilio Cat"></p>

<h2>Caveats</h2>

<p>As this application was developed using Twilio&rsquo;s free service, you can only send texts to the phone number that you verified your Twilio account with. To mess with your friends, activate your Twilio account by adding a credit card. Individual texts cost less that $.01&hellip;</p>

<h2>Next Steps</h2>

<p>One day I will write a follow up, but for now, check out this <a href="https://github.com/crabasa/twilio-rails-demo">github repo</a> for an idea of where else you can take Twilio and Rails.</p>
]]></content>
  </entry>
  
</feed>
