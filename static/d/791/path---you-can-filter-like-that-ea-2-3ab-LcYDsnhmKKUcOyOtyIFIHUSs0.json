{"data":{"site":{"siteMetadata":{"title":"Chandler Moisen","author":"Chandler Moisen"}},"markdownRemark":{"id":"3a9e89e3-e789-51d4-b776-2f48a1e83d99","excerpt":"One of the joys of programming is discovery novel ways to solve common problems.For example, take filtering falsy values from an array.I have typically done…","html":"<p>One of the joys of programming is discovery novel ways to solve common problems.</p>\n<p>For example, take filtering falsy values from an array.</p>\n<p>I have typically done this one of two ways.</p>\n<p>Either, passing a function to JavaScript’s <code class=\"language-text\">Array.prototype.filter</code> that</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const array = [1, 2, undefined, 4]\nconst filteredArray = array.filter(value =&gt; value)</code></pre></div>\n<p>Or, leveraging a utility like LoDash:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const array = [1, 2, undefined, 4]\nconst filteredArray = _.compact(array)</code></pre></div>\n<p>While both approaches solve the problem, both feel inelegant. In the first example I dislike <code class=\"language-text\">(value =&gt; value)</code>. In the second, I feel silly reaching for a utility when JavaScript provides native array filtering.</p>\n<p>This week, I came across a third approach I find much more appealing:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const array = [1, 2, undefined, 4]\nconst filteredArray = array.filter(Boolean)</code></pre></div>","frontmatter":{"title":"You Can Filter Like That?","date":"December 20, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/you-can-filter-like-that/","previous":{"fields":{"slug":"/what-seventh-graders-want-to-know-about-programming/"},"frontmatter":{"title":"What Seventh Graders Want to Know About Programming"}},"next":null}}