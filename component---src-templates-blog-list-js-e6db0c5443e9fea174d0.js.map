{"version":3,"sources":["webpack:///./src/components/PostTags.js","webpack:///./src/components/BlogPost.js","webpack:///./src/components/Pagination.js","webpack:///./src/templates/blog-list.js"],"names":["PostTags","tags","sort","map","tag","key","className","to","kebabCase","BlogPost","post","slug","fields","frontmatter","title","date","description","url","isTIL","style","marginBottom","rhythm","dangerouslySetInnerHTML","__html","excerpt","Container","styled","div","PrevLink","NextLink","PageNumbers","PageNumber","Link","bold","large","pushLeft","Pagination","currentPage","numPages","isFirstPage","isLastPage","prevPage","toString","nextPage","rel","Array","from","length","_","i","pageQuery","BlogList","data","location","pageContext","siteTitle","group","site","siteMetadata","posts","allMarkdownRemark","edges","node"],"mappings":"sJAmBeA,EAfE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAGlB,OAFAA,EAAKC,OAEED,EAAKE,KAAI,SAAAC,GAAG,OACjB,0BACEC,IAAKD,EACLE,UAAU,OAEV,kBAAC,OAAD,CAAMC,GAAE,SAAWC,IAAUJ,GAArB,KACLA,Q,YC0BMK,IA/BE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACVC,EAASD,EAAKE,OAAdD,KADqB,EAEqBD,EAAKG,YAA/CC,EAFqB,EAErBA,MAAOC,EAFc,EAEdA,KAAMC,EAFQ,EAERA,YAAaf,EAFL,EAEKA,KAC5BgB,EAHuB,EAEWC,MACvB,SAAYP,EAAZ,WAAgCA,EAEjD,OACE,6BACE,wBAAIQ,MAAO,CAAEC,aAAcC,YAAO,OAChC,kBAAC,OAAD,CAAMd,GAAIU,GAAMH,IAGlB,yBAAKK,MAAO,CAAEC,aAAcC,YAAO,EAAI,KACrC,2BAAIN,IAGN,uBACEO,wBAAyB,CACvBC,OAAQP,GAAeN,EAAKc,SAE9BL,MAAO,CAAEC,aAAcC,YAAO,OAG/BpB,GAAQ,kBAAC,EAAD,CAAUA,KAAMA,O,4JC1BzBwB,EAAYC,IAAOC,IAAV,4EAAGD,CAAH,oHASTE,EAAWF,IAAOC,IAAV,2EAAGD,CAAH,4EAQRG,EAAWH,IAAOC,IAAV,2EAAGD,CAAH,6FASRI,EAAcJ,IAAOC,IAAV,8EAAGD,CAAH,4JAaXK,EAAaL,YAAOM,QAAV,6EAAGN,CAAH,0EAEC,qBAAGO,MAAmB,UACxB,qBAAGC,OAAqB,UACtB,qBAAGC,UAA2B,UA6ChCC,EA1CI,SAAC,GAGb,IAFLC,EAEI,EAFJA,YACAC,EACI,EADJA,SAEMC,EAA8B,IAAhBF,EACdG,EAAaH,IAAgBC,EAC7BG,EAAWJ,EAAc,GAAM,EAAI,WAAxB,aAAkDA,EAAc,GAAGK,WAC9EC,EAAQ,aAAgBN,EAAc,GAAGK,WAE/C,OACE,kBAACjB,EAAD,KACE,kBAACG,EAAD,MACIW,GACA,kBAAC,OAAD,CAAMhC,GAAIkC,EAAUG,IAAI,QAAxB,oBAKJ,kBAACd,EAAD,KACGe,MAAMC,KAAK,CAAEC,OAAQT,IAAY,SAACU,EAAGC,GAAJ,OAChC,kBAAClB,EAAD,CACE1B,IAAG,qBAAsB4C,EAAI,GAC7B1C,GAAE,aAAoB,IAAN0C,EAAU,GAAKA,EAAI,GACnChB,KAAMgB,IAAMZ,EAAc,EAC1BH,MAAOe,IAAMZ,EAAc,EAC3BF,SAAgB,IAANc,GAETA,EAAI,OAIX,kBAACpB,EAAD,MACIW,GACA,kBAAC,OAAD,CAAMjC,GAAIoC,EAAUC,IAAI,QAAxB,kB,wBC3CGM,GAFEC,UA7BE,SAAC,GAIX,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,SACAC,EACI,EADJA,YAGeC,GADFH,EAAKnD,KAAKuD,MACMJ,EAAKK,KAAKC,aAA/B5C,OACFyB,EAA0C,IAA5Be,EAAYjB,YAC1BsB,EAAQP,EAAKQ,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQR,SAAUA,EAAUvC,MAAOyC,GACjC,kBAAC,IAAD,CAAKzC,MAAM,YAEVyB,GACC,kBAAC,IAAD,gBAGDoB,EAAMxD,KAAI,SAAAO,GAAI,OACb,yBAAKL,IAAKK,EAAKoD,KAAKlD,OAAOD,MACzB,kBAACF,EAAA,EAAD,CAAUC,KAAMA,EAAKoD,WAIzB,kBAAC,EAAeR,KAOA","file":"component---src-templates-blog-list-js-e6db0c5443e9fea174d0.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport kebabCase from 'lodash/kebabCase'\n\nconst PostTags = ({ tags }) => {\n  tags.sort()\n\n  return tags.map(tag => (\n    <span\n      key={tag}\n      className=\"tag\"\n    >\n      <Link to={`/tags/${kebabCase(tag)}/`}>\n        {tag}\n      </Link>\n    </span>\n  ))\n}\n\nexport default PostTags\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nimport PostTags from './PostTags'\n\nimport { rhythm } from '../utils/typography'\n\nconst BlogPost = ({ post }) => {\n  const { slug } = post.fields\n  const { title, date, description, tags, isTIL } = post.frontmatter\n  const url = isTIL ? `/notes${slug}` : `/writing${slug}`\n\n  return (\n    <div>\n      <h2 style={{ marginBottom: rhythm(1 / 4) }}>\n        <Link to={url}>{title}</Link>\n      </h2>\n\n      <div style={{ marginBottom: rhythm(1 / 3) }}>\n        <b>{date}</b>\n      </div>\n\n      <p\n        dangerouslySetInnerHTML={{\n          __html: description || post.excerpt,\n        }}\n        style={{ marginBottom: rhythm(0.5) }}\n      />\n\n      {tags && <PostTags tags={tags} />}\n    </div>\n  )\n}\n\nBlogPost.propTypes = {\n  post: PropTypes.object.isRequired,\n}\n\nexport default BlogPost\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  display: flex;\n  justifyContent: space-between;\n  margin-top: 36px;\n\n  @media screen and (max-width: 425px) {\n    flex-wrap: wrap;\n  }\n`\nconst PrevLink = styled.div`\n  flex-basis: 33.33%;\n\n  @media screen and (max-width: 425px) {\n    flex-basis: 50%;\n  }\n`\n\nconst NextLink = styled.div`\n  flex-basis: 33.33%;\n  text-align: right;\n\n  @media screen and (max-width: 425px) {\n    flex-basis: 50%;\n  }\n`\n\nconst PageNumbers = styled.div`\n  align-items: center;\n  display: flex;\n  flex-basis: 33.33%;\n  justify-content: center;\n\n  @media screen and (max-width: 425px) {\n    flex-basis: 100%;\n    margin-top: 16px;\n    order: 1;\n  }\n`\n\nconst PageNumber = styled(Link)`\n  background-image: none;\n  font-weight: ${({ bold }) => bold && 'bold'};\n  font-size: ${({ large }) => large && '24px'};\n  margin-left: ${({ pushLeft }) => pushLeft && '24px'};\n`\n\nconst Pagination = ({\n  currentPage,\n  numPages\n}) => {\n  const isFirstPage = currentPage === 1\n  const isLastPage = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? '/writing' : `/writing/${(currentPage - 1).toString()}`\n  const nextPage = `/writing/${(currentPage + 1).toString()}`\n\n  return (\n    <Container>\n      <PrevLink>\n        {!isFirstPage && (\n          <Link to={prevPage} rel=\"prev\">\n            ← Previous Page\n          </Link>\n        )}\n      </PrevLink>\n      <PageNumbers>\n        {Array.from({ length: numPages }, (_, i) => (\n          <PageNumber\n            key={`pagination-number${i + 1}`}\n            to={`/writing/${i === 0 ? '' : i + 1}`}\n            bold={i === currentPage - 1}\n            large={i === currentPage - 1}\n            pushLeft={i !== 0}\n          >\n            {i + 1}\n          </PageNumber>\n        ))}\n      </PageNumbers>\n      <NextLink>\n        {!isLastPage && (\n          <Link to={nextPage} rel=\"next\">\n            Next Page →\n          </Link>\n        )}\n      </NextLink>\n    </Container>\n  )\n}\n\nexport default Pagination\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Pagination from '../components/Pagination'\nimport BlogPost from '../components/BlogPost'\nimport { PageHeading } from '../components/styled-components'\n\nconst BlogList = ({\n  data,\n  location,\n  pageContext,\n}) => {\n  const tags = data.tags.group\n  const { title: siteTitle } = data.site.siteMetadata\n  const isFirstPage = pageContext.currentPage === 1\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Writing\" />\n\n      {isFirstPage && (\n        <PageHeading>Writing</PageHeading>\n      )}\n\n      {posts.map(post => (\n        <div key={post.node.fields.slug}>\n          <BlogPost post={post.node} />\n        </div>\n      ))}\n\n      <Pagination {...pageContext} />\n    </Layout>\n  )\n}\n\nexport default BlogList\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    tags: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tags) {\n        value: fieldValue\n      }\n    }\n    allMarkdownRemark(\n      limit: $limit\n      skip: $skip\n      sort: {\n        fields: [frontmatter___date],\n        order: DESC\n      }\n      filter: {\n        frontmatter: {\n          is_til: { eq: null }\n        }\n      }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n            isTil: is_til\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}