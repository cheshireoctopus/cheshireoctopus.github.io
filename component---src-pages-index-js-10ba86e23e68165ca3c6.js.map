{"version":3,"sources":["webpack:///./src/components/TagsRotator.js","webpack:///./src/components/Bio.js","webpack:///./src/pages/index.js"],"names":["TagsRotator","formattedTags","tags","filter","obj","value","map","initialState","index","tag","useState","currentTag","setCurrentTag","useEffect","interval","setInterval","nextTag","clearInterval","to","kebabCase","StyledP","styled","h1","theme","fontSizes","mediaQueries","large","p","space","Bio","href","Wrapper","div","pageQuery","IndexPage","data","location","group","siteTitle","site","siteMetadata","title"],"mappings":"sPAmCeA,EA/BK,SAAC,GAAc,IAC3BC,EAD0B,EAAXC,KAElBC,QAAO,SAAAC,GAAG,MAAkB,QAAdA,EAAIC,SAClBC,KAAI,SAAAF,GAAG,OAAIA,EAAIC,SACZE,EAAe,CACnBC,MAAO,EACPC,IAAKR,EAAc,IANW,EAQIS,mBAASH,GAAtCI,EARyB,KAQbC,EARa,KA4BhC,OAlBAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAAO,IAC1BP,EAAUG,EAAVH,MACFQ,EAAUf,EAAcO,EAAQ,GAGpCI,EADEI,EACY,CACZR,MAAOA,EAAQ,EACfC,IAAKO,GAGOT,KAEf,MAEH,OAAO,kBAAMU,cAAcH,OAGtB,kBAAC,OAAD,CAAMI,GAAE,SAAWC,IAAUR,EAAWF,KAAhC,KAA0CE,EAAWF,MChBhEW,GATWC,IAAOC,GAAV,oEAAGD,CAAH,wDACC,qBAAGE,MAAkBC,UAAU,MAG1C,qBAAGD,MAAkBE,aAAaC,SACrB,qBAAGH,MAAkBC,UAAU,MAIhCH,IAAOM,EAAV,mEAAGN,CAAH,uDACE,qBAAGE,MAAkBC,UAAU,MAE3B,qBAAGD,MAAkBK,MAAM,OAwB/BC,EArBH,SAAC,GAAD,IAAG3B,EAAH,EAAGA,KAAH,OACV,oCACE,kBAAC,IAAD,4BAEA,kBAACkB,EAAD,uFACiF,8CADjF,uBAIA,kBAACA,EAAD,mEAC6D,uBAAGU,KAAK,iBAAR,MAD7D,oEAEiE,uBAAGA,KAAK,qBAAR,UAFjE,KAKA,kBAACV,EAAD,MAIA,kBAACA,EAAD,sBAAuB,kBAAC,EAAD,CAAalB,KAAMA,IAA1C,OC/BE6B,EAAUV,IAAOW,IAAV,qEAAGX,CAAH,+FA2BAY,GAFEC,UAlBG,SAAC,GAGZ,IAFLC,EAEI,EAFJA,KACAC,EACI,EADJA,SAEMlC,EAAOiC,EAAKjC,KAAKmC,MACRC,EAAcH,EAAKI,KAAKC,aAA/BC,MAER,OACE,kBAAC,IAAD,CAAQL,SAAUA,EAAUK,MAAOH,GACjC,kBAACP,EAAD,KACE,kBAAC,IAAD,MAEA,kBAAC,EAAD,CAAK7B,KAAMA,OAQG","file":"component---src-pages-index-js-10ba86e23e68165ca3c6.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Link } from 'gatsby'\nimport kebabCase from 'lodash/kebabCase'\n\nconst TagsRotator = ({ tags }) => {\n  const formattedTags = tags\n    .filter(obj => obj.value !== 'TIL')\n    .map(obj => obj.value)\n  const initialState = {\n    index: 0,\n    tag: formattedTags[0],\n  }\n  const [currentTag, setCurrentTag] = useState(initialState)\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const { index } = currentTag\n      const nextTag = formattedTags[index + 1]\n\n      if (nextTag) {\n        setCurrentTag({\n          index: index + 1,\n          tag: nextTag,\n        })\n      } else {\n        setCurrentTag(initialState)\n      }\n    }, 2500)\n\n    return () => clearInterval(interval)\n  })\n\n  return <Link to={`/tags/${kebabCase(currentTag.tag)}/`}>{currentTag.tag}</Link>\n}\n\nexport default TagsRotator\n","import React from 'react'\n\nimport { PageHeading } from './styled-components'\nimport TagsRotator from './TagsRotator'\n\nimport styled from 'styled-components'\n\nconst StyledH1 = styled.h1`\n  font-size: ${({ theme }) => theme.fontSizes[7]}px;\n  margin-top: 0;\n\n  ${({ theme }) => theme.mediaQueries.large} {\n    font-size: ${({ theme }) => theme.fontSizes[9]}px;\n  }\n`\n\nconst StyledP = styled.p`\n  font-size: ${({ theme }) => theme.fontSizes[4]}px;\n  margin-top: 0;\n  margin-bottom: ${({ theme }) => theme.space[3]}px;\n`\n\nconst Bio = ({ tags }) => (\n  <>\n    <PageHeading>Hello, I'm Chandler</PageHeading>\n\n    <StyledP>\n      I am a software developer, product designer, and technology educator living in <del>New York City</del> Colorful Colorado.\n    </StyledP>\n\n    <StyledP>\n      By day I work to reduce friction in healthcare delivery at <a href=\"https://ro.co\">Ro</a>.\n      By night I work to reduce friction in digital design hiring at <a href=\"https://keming.io\">Keming</a>.\n    </StyledP>\n\n    <StyledP>\n\n    </StyledP>\n\n    <StyledP>I write about <TagsRotator tags={tags} />.</StyledP>\n  </>\n)\n\nexport default Bio\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport styled from 'styled-components'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Bio from '../components/Bio'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: calc(100vh - 322px);\n  justify-content: center;\n`\n\nconst IndexPage = ({\n  data,\n  location,\n}) => {\n  const tags = data.tags.group\n  const { title: siteTitle } = data.site.siteMetadata\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Wrapper>\n        <SEO />\n\n        <Bio tags={tags} />\n      </Wrapper>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    tags: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tags) {\n        value: fieldValue\n      }\n    }\n  }\n`\n"],"sourceRoot":""}